#!/usr/bin/python3.9
# -*- coding: utf-8 -*-

# source
# https://github.com/DiploDatos/IntroduccionAprendizajeAutomatico.git

# I-  ===========================  importacion de modulos/librerias-.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
## import pandas_profiling as pp # fantastic tool !!!!
import numpy as np
## import os
import subprocess as sp
from sklearn.datasets import load_boston  # @ cargar el DS-.

# newline
nl = '\n'  # usadoo en f's print formats-.
sp.run(['clear'])  # para limpiar la terminal-.

# II- =========================== cargamos el dataset-.
boston = load_boston()

# lo cargamos como un PandasDataFrame-.
df = pd.DataFrame(boston.data, columns=boston.feature_names)
# print(f'Tamano del DF ANTES de agregar la variable de interes'
#      f'{df.shape}')
df['target'] = boston.target  # agregamos la variable MEDV == target del DF.-
# print(f'Tamano del DF LUEGO de agregar la variable de interes'
#      f'{df.shape}')

# print(f'{nl}{type(boston)}{nl}')  # Cont. Obj. exposing keys as attributes.
# FUNDAMENTAL MAS IMPORTANTE ==> llaves del diccionario (valores==>values())-.
print(f'{nl}{boston.keys()}{nl}')
# print(f'{nl}{boston}{nl}')  # llaves y valores del diccionario-.

# que contiene cada llave del diccionario?-.
print('{0}{1} ******** Descripcion del dataset ******** {2}{3}'.
      format('\n', '\t', boston['DESCR'], '\n')) # descripcion del dataset-.
# matriz con los datos de entrada (atributos)-.
# print(boston['data'])
# vector con los valores de precio (-media-) ||| np array (.size == 506)-.
# print(boston['target'])
# nombres de los atrib. p c/column de 'data'  ||| np array (.size == 13)-.-.
# print(boston['feature_names'].size)

'''
< ==//=== > Ejercicio 1: Descripcion de los Datos y la Tarea < ==//== > 
************************************************************************
Descripcion/caracteristicas del DataSet (DS):
Cada registro/fila del DS corresponde a una ciudad o suburbio de
Boston. Inicialmente el DS fue hecho por el SMSA (Boston Standard
Metropolitan Statistical en 1970). Los creadores del DS son
Harrison, D. and Rubinfeld, D.L.; este DS es una copia del  UCI ML
housing dataset.
https://archive.ics.uci.edu/ml/machine-learning-databases/housing/
y fue tomado del StatLib library el cual es mantenido por la Universidad de
Carnie Mellon-.

IMPORTANTE: el DS, tal como esta,
presenta problemas ETICOS (para mi vinculados a DISCRIMINACION RACIAL Y 
SOCIAL en su lugar deberia trabajarse con el DS original).

====================================================================
data_url = "http://lib.stat.cmu.edu/datasets/boston"
raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
====================================================================

* Numero de casos reportados (registros): 506 (registro/fila/
  ciudad/suburbio)-.
* Numero de atributos/variables predictivas por registro: 13 (trece)
  -NUMERICAS/CATEGORICAS-. El valor medio (atributo/variable 14) es el
  blanco u objetivo -notar que la key que corresponde a esta variable,
  "target", es diferente al key del DS "MEDV"-.
************************************************************************

1-1- Descripcion/caracteristicas del DataSet (DS):
DS conlos PRECIOS y caracteristicas de casas en diferentes lugares
(suburbios/ciudades) de Boston-.

1-2- ¿Cual es la variable objetivo que hay que predecir?,
     ¿Que significado tiene?
La variable objetivo (target) es MDEV/target: representa el precio medio 
de las casas en miles de dolares norteamericanos-.

1-3- ¿Que informacion (atributos) hay disponibles para hacer la 
     prediccion?
Las variables/atributos (columnas) corresponden a (tomado de la UCI
Machine Learning Repository):
CRIM   : tasa de crimen/per capita por ciudad/suburbio-.
ZN     : proporcion de lotes en zona residencial @ lotes de >
         >25000 pies cuadrados.
INDUS  : proporcion de acres (1 acre = 0.4-0.5 hectareas) comerciales no
         minoristas por ciudad-.
CHAS   : variable ficticia de Charles River (= 1 si limita con el rio,
         0 si no lo hace-.
NOX    : concentracion de Oxido Nitrico (1 parte por 10 millones)-.
RM     : numero promedio de habitaciones por vivienda-.
AGE    : proporcion de unidades ocupados por sus duenos construidas
         antes de 1940-.
DIS    : distancias ponderadas a 5 centros de empleo en Boston-.
RAD    : indice de accesibilidad a la carretera radial-.
TAX    : impuesto a la propiedad de valor total por USD 10000-.
PTRATIO: relacion alumno/maestro por ciudad-.
B      : 1000 (Bk−0.63)2 donde Bk es la proporcion de negros por ciudad-.
LSTAT  : porcentaje de la poblacion de bajo estrato social-.

Variable objetivo:
MDEV/target : valor medio de casas ocupados por sus propietarios 
              (en miles)-.


1-4- Que atributos imagina ud. que seran los mas determinantes para la 
     prediccion?.
RM     : numero promedio de habitaciones por vivienda-.
DIS    : distancias ponderadas a 5 centros de empleo en Boston-.
TAX    : impuesto a la propiedad de valor total por USD 10000-.



1-5- ¿Que problemas observa a priori en el conjunto de datos? ¿Observa 
      posibles sesgos, riesgos, dilemas eticos, etc.?. Piense que los 
      datos pueden ser utilizados para hacer predicciones futuras.

Presenta problemas ETICOS (para mi vinculados a DISCRIMINACION RACIAL Y 
SOCIAL en su lugar deberia trabajarse con el DS original).

'''

# adicional, visualizamos el DS @ chequear si existen valores nulos,
# los Tipos de Datos (TdD), cantidad de datos, balanceo, etc.
print(df.describe().T)
print(df.columns)
print(df.info())
print(df.dtypes)

# a partir del estudio de las variable del DS, identifico dos variables que
# que pueden ser categoricas, las imprimo para chequear-.
print(df.loc[:,['RAD', 'CHAS']]) # idem print(df[df['RAD', 'CHAS']])

# convierto ambas variables a enteras-.
cols_to_convert = {
    'RAD': np.int64,
    'CHAS': np.int64
}
df = df.astype(cols_to_convert)

print(df.dtypes)

# print(df.corr())

## report = pp.ProfileReport(boston)
# display(report)

'''
< ==//=== > Ejercicio 2: Visualizacion de los Datos < ==//== > 
'''

#print(df.describe().T)
#print(df.info())
#print(df.corr())

## report = pp.ProfileReport(boston)
# display(report)
